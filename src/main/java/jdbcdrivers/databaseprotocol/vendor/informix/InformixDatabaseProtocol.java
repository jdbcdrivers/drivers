package jdbcdrivers.databaseprotocol.vendor.informix;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.URI;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.Objects;
import java.util.Properties;

import jdbcdrivers.databaseprotocol.api.IDatabaseProtocol;
import jdbcdrivers.databaseprotocol.api.IGenericPreparedStatementParameterGetters;
import jdbcdrivers.databaseprotocol.api.IRetrievedRows;
import jdbcdrivers.generic.GenericResultSetMetaData;
import jdbcdrivers.generic.ResultRowDecoder;
import jdbcdrivers.generic.api.ExecuteResult;
import jdbcdrivers.generic.api.GenericStatementExecutionOptions;
import jdbcdrivers.generic.api.GenericStatementExecutionOptions.AutoGeneratedKeys;
import jdbcdrivers.generic.exceptions.ProtocolErrorCodeException;
import jdbcdrivers.generic.exceptions.ProtocolErrorException;
import jdbcdrivers.generic.util.StringEncoder;
import jdbcdrivers.util.BufferOutputStream;
import jdbcdrivers.util.DriverUtil;

/**
 * Informix database protocol implementation, extends generic protocol implementation.
 */
final class InformixDatabaseProtocol implements IDatabaseProtocol<InformixPreparedStatement, InformixDataType> {

    private final BufferOutputStream bufferOutputStream;
    private final DataOutput bufferDataOutput;

    private final InformixResultRowDecoder resultRowDecoder;

    private boolean initialCommit;

    InformixDatabaseProtocol(Charset charset) {

        this.bufferOutputStream = new BufferOutputStream();
        this.bufferDataOutput = new DataOutputStream(bufferOutputStream);

        this.resultRowDecoder = new InformixResultRowDecoder(charset);

        this.initialCommit = true;
    }

    @Override
    public void performInitialSetup(DataOutputStream dataOutput, DataInput dataInput, URI uri, Properties properties)
            throws ProtocolErrorException, ProtocolErrorCodeException, IOException {

        sendOutboundWithLength(dataOutput, o -> InformixOutbound.sendInitialSetup(o, uri, properties));
        receiveInboundWithMessageLengthAndResult(dataInput, InformixInbound::receiveInitialSetupReponse);

        sendOutbound(dataOutput, o -> InformixOutbound.sendUnknown1(o));
        receiveInboundWithMessageType(dataInput, InformixMessageType.UNKNOWN1, InformixInbound::receiveUnknown1);

        sendOutbound(dataOutput, o -> InformixOutbound.sendProperties(o));
        InformixInbound.receivePropertiesReponse(dataInput);

        sendOutbound(dataOutput, o -> InformixOutbound.sendSelectDatabase(o, uri.getPath().substring(1)));
        receiveInboundWithMessageType(dataInput, InformixMessageType.RESPONSE_STATUS, InformixInbound::receiveSelectDatabaseReponse);

/*
        sendOutbound(dataOutput, o -> InformixOutbound.sendSetIsolation(o, "set isolation to dirty read"));
        InformixInbound.receiveSetIsolationReponse(dataInput);

        sendOutbound(dataOutput, o -> InformixOutbound.sendSetIsolation(o, "select FIRST 1 site from informix.systables where tabname = ' GL_COLLATE'"));
        InformixInbound.receiveExecuteSQLReponse(dataInput);
*/

/*
        sendOutbound(dataOutput, o -> InformixOutbound.sendIFXC(o));
        InformixInbound.receiveIFXCReponse(dataInput);

        sendOutbound(dataOutput, o -> InformixOutbound.sendRetrieveCharset(o));
        receiveInboundWithMessageType(dataInput, InformixMessageType.RETRIEVE_CHARSET_RESPONSE, InformixInbound::receiveRetrieveCharsetResponse);
*/
        sendOutbound(dataOutput, o -> InformixOutbound.sendSetIsolation(o, "set isolation to committed read"));
        receiveInboundWithMessageType(dataInput, InformixMessageType.RESULT, InformixInbound::receiveSetIsolationReponse);
    }

    @Override
    public void setAutoCommit(DataOutputStream dataOutput, DataInput dataInput, boolean on) throws ProtocolErrorException, ProtocolErrorCodeException, IOException {

        sendOutbound(dataOutput, o -> {

            if (on) {

                throw new UnsupportedOperationException();
            }
            else {
                InformixOutbound.sendAutoCommitOff(dataOutput);
            }
        });

        InformixInbound.receiveAutoCommitReponse(dataInput);
    }

    @Override
    public void executeQuery(DataOutputStream dataOutput, DataInput dataInput, String sql) throws IOException {

        throw new UnsupportedOperationException();
    }

    @Override
    public int executeUpdate(DataOutputStream dataOutput, DataInput dataInput, String sql) throws IOException {

        throw new UnsupportedOperationException();
    }

    @Override
    public ExecuteResult executeSQL(DataOutputStream dataOutput, DataInput dataInput, String sql) throws ProtocolErrorException, ProtocolErrorCodeException, IOException {

        sendOutbound(dataOutput, o -> InformixOutbound.sendExecuteSQL(dataOutput, sql));

        return receiveInboundWithMessageTypeAndResult(dataInput, InformixMessageType.RESULT, i -> InformixInbound.receiveExecuteSQLReponse(i));
    }

    @Override
    public PreparedStatementResult<InformixPreparedStatement> prepareStatement(DataOutputStream dataOutput, DataInput dataInput, String sql, GenericStatementExecutionOptions statementParameters)
            throws ProtocolErrorException, ProtocolErrorCodeException,  IOException {

        final long numQuestionMarks = sql.chars().filter(c -> c == '?').count();

        if (numQuestionMarks > DriverUtil.MAX_UNSIGNED_SHORT) {

            throw new IllegalArgumentException();
        }

        final int numSQLParameters = (int)numQuestionMarks;

        sendOutbound(dataOutput, o -> InformixOutbound.sendPrepareStatement(dataOutput, sql, statementParameters, numSQLParameters));

        final InformixPreparedStatement preparedStatement = receiveInboundWithMessageTypeAndResult(dataInput, InformixMessageType.RESULT,
                i -> InformixInbound.receivePrepareStatementResponse(i, statementParameters));

        return new PreparedStatementResult<>(preparedStatement, numSQLParameters);
    }

    @Override
    public void executePreparedQuery(InformixPreparedStatement preparedStatement, DataOutputStream dataOutput, DataInput dataInput,
            IGenericPreparedStatementParameterGetters preparedStatementParameters, StringEncoder stringEncoder)
                    throws ProtocolErrorException, ProtocolErrorCodeException, IOException {

        sendOutbound(dataOutput, o -> InformixOutbound.sendIFXC(o, preparedStatement.getIdentifier(), 1));
        InformixInbound.receiveIFXCReponse(dataInput);

        sendOutbound(dataOutput, o -> InformixOutbound.sendExecutePreparedQuery(o, (InformixColumnPreparedStatement)preparedStatement, preparedStatementParameters,
                stringEncoder));
    }

    @Override
    public int executePreparedUpdate(InformixPreparedStatement preparedStatement, DataOutputStream dataOutput, DataInput dataInput,
            IGenericPreparedStatementParameterGetters preparedStatementParameters, StringEncoder stringEncoder)
                    throws ProtocolErrorException, ProtocolErrorCodeException, IOException {

        final InformixColumnPreparedStatement columnPreparedStatement = (InformixColumnPreparedStatement)preparedStatement;

        sendOutbound(dataOutput, o -> InformixOutbound.sendUpdateValues(o, columnPreparedStatement, preparedStatementParameters, stringEncoder));

        final GenericStatementExecutionOptions statementExecutionOptions = columnPreparedStatement.getStatementExecutionOptions();

        final int numStatements = 1;

        final int[] updateCountsDst = new int[numStatements];

        final int[] generatedKeysDst = statementExecutionOptions.getAutoGeneratedKeys() == AutoGeneratedKeys.RETURN_GENERATED_KEYS
                ? new int[numStatements]
                : null;

        InformixInbound.receiveValuesForPreparedReponse(dataInput, statementExecutionOptions, updateCountsDst, generatedKeysDst);

        return updateCountsDst[0];
    }

    @Override
    public void closePreparedStatement(InformixPreparedStatement preparedStatement, DataOutputStream dataOutput, DataInput dataInput)
            throws ProtocolErrorException, ProtocolErrorCodeException, IOException {

        sendOutbound(dataOutput, o -> InformixOutbound.sendClosePreparedStatement(o, preparedStatement));

        InformixInbound.receiveClosePreparedStatementResponse(dataInput);
    }

    @Override
    public int[] executeBatches(InformixPreparedStatement preparedStatement, Collection<? extends IGenericPreparedStatementParameterGetters> batches, DataOutputStream dataOutput,
            DataInput dataInput, StringEncoder stringEncoder) throws ProtocolErrorException, ProtocolErrorCodeException, IOException {

        final InformixColumnPreparedStatement columnPreparedStatement = (InformixColumnPreparedStatement)preparedStatement;

        sendOutbound(dataOutput, o -> InformixOutbound.sendExecuteBatches(dataOutput, columnPreparedStatement));
        receiveInboundWithMessageType(dataInput, InformixMessageType.EXECUTE_BATCH_RESPONSE, i -> InformixInbound.receiveExecuteBatchesResponse(i, columnPreparedStatement));

        sendOutbound(dataOutput, o -> InformixOutbound.sendUpdateBatches(o, columnPreparedStatement, batches, stringEncoder));

        final GenericStatementExecutionOptions statementExecutionOptions = columnPreparedStatement.getStatementExecutionOptions();

        final int numStatements = batches.size();

        final int[] updateCountsDst = new int[numStatements];

        final int[] generatedKeysDst = statementExecutionOptions.getAutoGeneratedKeys() == AutoGeneratedKeys.RETURN_GENERATED_KEYS
                ? new int[numStatements]
                : null;

        InformixInbound.receiveValuesForPreparedReponse(dataInput, statementExecutionOptions, updateCountsDst, generatedKeysDst);

        return updateCountsDst;
    }

    @Override
    public void sendBegin(DataOutputStream dataOutput, DataInput dataInput) throws ProtocolErrorException, ProtocolErrorCodeException, IOException {

        sendOutbound(dataOutput, o -> InformixOutbound.sendBegin(o));
        receiveInboundWithMessageType(dataInput, InformixMessageType.COMMIT_RESPONSE, i -> InformixInbound.receiveBeginReponse(i));
    }

    @Override
    public void sendCommit(DataOutputStream dataOutput, DataInput dataInput) throws ProtocolErrorException, ProtocolErrorCodeException, IOException {

        if (initialCommit) {

            sendOutbound(dataOutput, o -> InformixOutbound.sendPreparedOperation(o, InformixOperationType.OP_0x07));
//        InformixInbound.receivePreparedOperationResponse(dataInput);
            receiveInboundWithMessageType(dataInput, InformixMessageType.RESPONSE_STATUS, i -> InformixInbound.receivePreparedOperation0x07Reponse(i));

            sendOutbound(dataOutput, o -> InformixOutbound.sendPreparedOperation(o, InformixOperationType.OP_0x0B));
            InformixInbound.receivePreparedOperationResponse(dataInput);

            this.initialCommit = false;
        }

        sendOutbound(dataOutput, o -> InformixOutbound.sendCommit(o));
        receiveInboundWithMessageType(dataInput, InformixMessageType.COMMIT_RESPONSE, i -> InformixInbound.receiveCommitReponse(i));
    }

    @Override
    public GenericResultSetMetaData<InformixDataType> retrieveResultMetaData(DataInput dataInput) throws IOException {

        throw new UnsupportedOperationException();
    }

    @Override
    public GenericResultSetMetaData<InformixDataType> retrievePreparedResultMetaData(DataInput dataInput, InformixPreparedStatement preparedStatement) throws IOException {

        return ((InformixColumnPreparedStatement)preparedStatement).toResultSetMetaData();
    }

    @Override
    public void retrieveResultRows(DataInput dataInput, byte[] dst, int maxRowsToReceive, int maxBytesPerRow, IRetrievedRows retrievedRows)
            throws ProtocolErrorException, ProtocolErrorCodeException, IOException {

        InformixInbound.receiveResultRows(dataInput, dst, maxRowsToReceive, maxBytesPerRow, retrievedRows);
    }

    @Override
    public void closeResultSet(DataOutputStream dataOutput, DataInput dataInput) throws ProtocolErrorException, ProtocolErrorCodeException, IOException {

    }

    @Override
    public void sendClose(DataOutputStream dataOutput, DataInput dataInput) throws IOException {

System.out.println("TODO: send close");
    }

    @Override
    public Object getPreparedStatementIdentifier(InformixPreparedStatement preparedStatement) {

        return preparedStatement.getIdentifier();
    }

    @Override
    public ResultRowDecoder<InformixDataType> getResultRowDecoder() {

        return resultRowDecoder;
    }

    @FunctionalInterface
    private interface InboundReceiver {

        void receive(DataInput dataInput) throws ProtocolErrorException, IOException;
    }

    @FunctionalInterface
    private interface InboundReceiverWithResult<R> {

        R receive(DataInput dataInput) throws ProtocolErrorException, IOException;
    }

    @FunctionalInterface
    private interface LengthInboundReceiver {

        void receive(DataInput dataInput, int messageLength) throws ProtocolErrorException, IOException;
    }

    @FunctionalInterface
    private interface LengthInboundReceiverWithResult<R> {

        R receive(DataInput dataInput, int messageLength) throws ProtocolErrorException, IOException;
    }

    private <R> R receiveInboundWithMessageLengthAndResult(DataInput dataInput, LengthInboundReceiverWithResult<R> lengthInboundReceiver) throws ProtocolErrorException, IOException {

        Objects.requireNonNull(dataInput);
        Objects.requireNonNull(lengthInboundReceiver);

        final int messageLength = InformixInbound.receiveMessageLength(dataInput);

        return lengthInboundReceiver.receive(dataInput, messageLength);
    }

    private <R> R receiveInboundWithMessageType(DataInput dataInput, InformixMessageType expectedMessageType, InboundReceiver inboundReceiver)
            throws ProtocolErrorException, ProtocolErrorCodeException, IOException {

        return receiveInboundWithMessageTypeAndResult(dataInput, expectedMessageType, i -> {

            inboundReceiver.receive(dataInput);

            return null;
        });
    }

    private <R> R receiveInboundWithMessageTypeAndResult(DataInput dataInput, InformixMessageType expectedMessageType, InboundReceiverWithResult<R> inboundReceiver)
            throws ProtocolErrorException, ProtocolErrorCodeException, IOException {

        Objects.requireNonNull(dataInput);
        Objects.requireNonNull(expectedMessageType);
        Objects.requireNonNull(inboundReceiver);

        final int messageTypeCode = dataInput.readUnsignedShort();

        final InformixMessageType receivedMessageType = InformixMessageType.fromCodeOrNull(messageTypeCode);

        if (receivedMessageType == null) {

System.out.format("Unknown message type for 0x%04x\n", messageTypeCode);

            throw new ProtocolErrorException();
        }

        final R result;

        if (receivedMessageType == expectedMessageType) {

            result = inboundReceiver.receive(dataInput);
        }
        else if (receivedMessageType == InformixMessageType.ERROR) {

            final int errorCode = InformixInbound.receiveErrorReponse(dataInput);

            throw new ProtocolErrorCodeException(errorCode);
        }
        else {

            throw new ProtocolErrorException();
        }

        return result;
    }

    @FunctionalInterface
    private interface OutboundSender {

        void send(DataOutput dataOutput) throws IOException;
    }

    private void sendOutboundWithLength(DataOutputStream dataOutput, OutboundSender outboundSender) throws IOException {

        Objects.requireNonNull(dataOutput);
        Objects.requireNonNull(outboundSender);

        try {
            outboundSender.send(bufferDataOutput);

            final int numBytes = bufferOutputStream.getNumBytes();

System.out.format("write length 0x%04x\n", numBytes);

            dataOutput.writeShort(numBytes + 2);
            dataOutput.write(bufferOutputStream.getOutputBuffer(), 0, numBytes);

System.out.println("sent to " + dataOutput);
        }
        finally {

            bufferOutputStream.reset();
        }

        dataOutput.flush();
    }

    private void sendOutbound(DataOutputStream dataOutput, OutboundSender outboundSender) throws IOException {

        Objects.requireNonNull(dataOutput);
        Objects.requireNonNull(outboundSender);

        outboundSender.send(dataOutput);

        dataOutput.flush();
    }
}
