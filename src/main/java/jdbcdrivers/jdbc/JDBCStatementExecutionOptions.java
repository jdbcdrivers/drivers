package jdbcdrivers.jdbc;

import java.sql.ResultSet;
import java.sql.Statement;

import jdbcdrivers.generic.api.GenericStatementExecutionOptions;
import jdbcdrivers.generic.api.GenericStatementExecutionOptions.AutoGeneratedKeys;
import jdbcdrivers.generic.api.GenericStatementExecutionOptions.Concurrency;
import jdbcdrivers.generic.api.GenericStatementExecutionOptions.Holdability;
import jdbcdrivers.generic.api.GenericStatementExecutionOptions.ResultSetType;

final class JDBCStatementExecutionOptions {

    private static final AutoGeneratedKeys DEFAULT_AUTO_GENERATED_KEYS = AutoGeneratedKeys.NO_GENERATED_KEYS;
    private static final ResultSetType DEFAULT_RESULT_TYPE = ResultSetType.FORWARD_ONLY;
    private static final Concurrency DEFAULT_CONCURRENCY = Concurrency.READ_ONLY;
    private static final Holdability DEFAULT_HOLDABILITY = Holdability.CLOSE_CURSORS_AT_COMMIT;

    private static final GenericStatementExecutionOptions defaultStatementExecutionOptions = new GenericStatementExecutionOptions(DEFAULT_AUTO_GENERATED_KEYS,
            DEFAULT_RESULT_TYPE, DEFAULT_CONCURRENCY);

    static GenericStatementExecutionOptions getDefaultStatementExecutionOptions() {
        return defaultStatementExecutionOptions;
    }

    static GenericStatementExecutionOptions getStatementExecutionOptions(int autoGeneratedKeys) {

        return new GenericStatementExecutionOptions(getAutoGeneratedKeys(autoGeneratedKeys), DEFAULT_RESULT_TYPE, DEFAULT_CONCURRENCY);
    }

    static GenericStatementExecutionOptions getStatementExecutionOptions(int resultSetType, int resultSetConcurrency) {

        return new GenericStatementExecutionOptions(DEFAULT_AUTO_GENERATED_KEYS, getResultSetType(resultSetType), getResultSetConcurrency(resultSetConcurrency));
    }

    static GenericStatementExecutionOptions getStatementExecutionOptions(int resultSetType, int resultSetConcurrency, int resultSetHoldability) {

        return new GenericStatementExecutionOptions(DEFAULT_AUTO_GENERATED_KEYS, getResultSetType(resultSetType), getResultSetConcurrency(resultSetConcurrency),
                getResultSetHoldability(resultSetHoldability));
    }

    private static AutoGeneratedKeys getAutoGeneratedKeys(int autoGeneratedKeys) {

        final AutoGeneratedKeys result;

        switch (autoGeneratedKeys) {

        case Statement.RETURN_GENERATED_KEYS:

            result = AutoGeneratedKeys.RETURN_GENERATED_KEYS;
            break;

        case Statement.NO_GENERATED_KEYS:

            result = AutoGeneratedKeys.NO_GENERATED_KEYS;
            break;

         default:
             throw new UnsupportedOperationException();
        }

        return result;
    }

    private static ResultSetType getResultSetType(int resultSetType) {

        final ResultSetType result;

        switch (resultSetType) {

        case ResultSet.TYPE_FORWARD_ONLY:

            result = ResultSetType.FORWARD_ONLY;
            break;

        case ResultSet.TYPE_SCROLL_INSENSITIVE:

            result = ResultSetType.SCROLL_INSENSITIVE;
            break;

        case ResultSet.TYPE_SCROLL_SENSITIVE:

            result = ResultSetType.SCROLL_SENSITIVE;
            break;

         default:
             throw new UnsupportedOperationException();
        }

        return result;
    }

    private static Concurrency getResultSetConcurrency(int resultSetConcurrency) {

        final Concurrency result;

        switch (resultSetConcurrency) {

        case ResultSet.CONCUR_READ_ONLY:

            result = Concurrency.READ_ONLY;
            break;

        case ResultSet.CONCUR_UPDATABLE:

            result = Concurrency.UPDATABLE;
            break;

        default:
             throw new UnsupportedOperationException();
        }

        return result;
    }

    private static Holdability getResultSetHoldability(int resultSetHoldability) {

        final Holdability result;

        switch (resultSetHoldability) {

        case ResultSet.HOLD_CURSORS_OVER_COMMIT:

            result = Holdability.HOLD_CURSORS_OVER_COMMIT;
            break;

        case ResultSet.CLOSE_CURSORS_AT_COMMIT:

            result = Holdability.CLOSE_CURSORS_AT_COMMIT;
            break;

        default:
             throw new UnsupportedOperationException();
        }

        return result;
    }
}
