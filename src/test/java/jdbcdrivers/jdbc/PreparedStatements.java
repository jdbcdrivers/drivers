package jdbcdrivers.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import jdbcdrivers.jdbc.utils.schema.Table;
import jdbcdrivers.jdbc.utils.schema.TableSQL;
import jdbcdrivers.util.DriverUtil;

public class PreparedStatements {

    @FunctionalInterface
    interface StatementPreparer {

        PreparedStatement prepare(Connection connection, String sql) throws SQLException;
    }

    static PreparedInsert prepareInsert(Connection connection, Table table) throws SQLException {

        return prepareInsert(connection, table, Connection::prepareStatement);
    }

    static PreparedInsert prepareInsert(Connection connection, Table table, int autoGeneratedKeys) throws SQLException {

        return prepareInsert(connection, table, (c, s) -> c.prepareStatement(s, autoGeneratedKeys));
    }

    static PreparedInsert prepareInsert(Connection connection, Table table, StatementPreparer statementPreparer) throws SQLException {

        Objects.requireNonNull(connection);
        Objects.requireNonNull(table);

        final String sql = TableSQL.makeInsertSQL(table);

        return prepareInsert(connection, sql, statementPreparer);
    }

    private static PreparedInsert prepareInsert(Connection connection, String sql, StatementPreparer statementPreparer) throws SQLException {

        return new PreparedInsert(sql, prepareStatement(connection, sql, statementPreparer));
    }

    static PreparedSelect prepareAllSelect(Connection connection, Table table) throws SQLException {

        final String pkColumnName = table.getPKColumnName();

        final String sql = "select * from " + table.getName() + (pkColumnName != null ? " order by " + pkColumnName : "");

        return prepareSelect(connection, sql);
    }

    private static PreparedSelect prepareSelect(Connection connection, String sql) throws SQLException {

        return new PreparedSelect(sql, prepareStatement(connection, sql, Connection::prepareStatement));
    }

    private static List<PreparedStatement> prepareStatement(Connection connection, String sql, StatementPreparer statementPreparer) throws SQLException {

        final int numPreparedStatements = 10;

        final List<PreparedStatement> preparedStatements = new ArrayList<>(numPreparedStatements);

        for (int i = 0; i < numPreparedStatements; ++ i) {

            preparedStatements.add(statementPreparer.prepare(connection, sql));
        }

        return preparedStatements;
    }

    static final class PreparedInsert extends Prepared {

        private PreparedInsert(String sql, List<PreparedStatement> preparedStatements) {
            super(sql, preparedStatements);
        }
    }

    static final class PreparedSelect extends Prepared {

        private PreparedSelect(String sql, List<PreparedStatement> preparedStatements) {
            super(sql, preparedStatements);
        }
    }

    private static abstract class Prepared implements AutoCloseable {

        private final String sql;
        private final List<PreparedStatement> preparedStatements;

        Prepared(String sql, List<PreparedStatement> preparedStatements) {

            this.sql = Objects.requireNonNull(sql);
            this.preparedStatements = DriverUtil.unmodifiableCopyOf(preparedStatements);
        }

        @Override
        public final void close() throws SQLException {

            for (PreparedStatement preparedStatement : preparedStatements) {

                preparedStatement.close();
            }
        }

        final String getSQL() {
            return sql;
        }

        final PreparedStatement getPreparedStatement() {

            return preparedStatements.getLast();
        }
    }
}
