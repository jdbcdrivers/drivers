package jdbcdrivers.jdbc;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;
import java.util.Objects;

import org.junit.Test;

import jdbcdrivers.jdbc.utils.schema.Table;
import jdbcdrivers.jdbc.utils.schema.TableBuilder;

public final class JDBCDriverTest extends BaseJDBCDriverIntegrationTest {

    @Test
    public void testDB() throws SQLException {

        checkDB(TestInformixDriver.OFFICIAL, BaseDriverTest::insertRows);
        checkDB(TestInformixDriver.OFFICIAL, BaseDriverTest::batchRows);

        checkDB(TestInformixDriver.REIMPLEMENTED, BaseDriverTest::insertRows);
        checkDB(TestInformixDriver.REIMPLEMENTED, BaseDriverTest::batchRows);
    }

    private void checkDB(TestInformixDriver testInformixDriver, RowsAdder rowsAdder) throws SQLException {

        Objects.requireNonNull(testInformixDriver);

        final String tableName = "test_table";

        final Table table = TableBuilder.create(tableName, "id")
                .addCharColumn("char_column", 30)
                .addCharColumn("large_char_column", (1 << 8) + 35)
                .addIntegerColumn("integer_column")
                .addVarcharColumn("char_column3", 40)
                .addVarcharColumn("varchar_column", 20)
                .addVarcharColumn("varchar_column2", 25)
//                .addLVarcharColumn("large_varchar_column", (1 << 8) + 20)
                .build();

        runTableTest(table, false, (c, t) -> checkInsertAndSelect(c, t, 10, true, rowsAdder));
    }

    private static void checkInsertAndSelect(Connection connection, Table table, int numRows, boolean returnAutoGeneratedKeys, RowsAdder rowsAdder) throws SQLException {

        Objects.requireNonNull(connection);
        Objects.requireNonNull(table);

        if (numRows < 0) {

            throw new IllegalArgumentException();
        }

        final List<Object[]> insertedRows = rowsAdder.addRows(connection, table, numRows, returnAutoGeneratedKeys);

        connection.commit();

        final List<Object[]> selectedRows = selectAllRows(connection, table);

        compareRows(insertedRows, selectedRows);
    }
}
